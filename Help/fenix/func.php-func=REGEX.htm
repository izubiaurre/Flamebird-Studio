<html><?xml version="1.0" encoding="ISO-8859-1"?><!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
         "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<title>
	Referencia de Fenix
</title>
<style>
	body	{ font-family: Verdana; font-size: 15px }
	a	{ text-decoration: none; color: #c00000; font-weight: bold }
	a:hover { color: #ff6600 }
	thead	{ background: black; color: white; padding: 4pt }
	li	{ padding: 4pt; padding-left: 12pt }
	pre	{ padding: 8pt; padding-left: 12pt; border: solid black 1px; background-color: white; margin-right: 40px }
	td      { padding: 4pt; vertical-align: top; }
	th      { padding: 4pt; vertical-align: top; background: #E0E0F0; text-align: left; width: 200px }
	body    { background: #F0F0F0 }
</style>
</head>
<body>

	<form action="func.php-func=.htm" tppabs="http://fenix.jlceb.com/func.php?func=">
	<div style=" 
		color: #A0A0A0; 
		border: outset #600000 2px; 
		background: #660000;
		text-align: center; 
		vertical-align: middle;
		font-weight: bold;
		height: 24px;
		margin: 0px; ">
		[ <a style="color: white" href="func.php-funcs=^(dll-){0}.htm" tppabs="http://fenix.jlceb.com/func.php?funcs=^(dll/){0}">TODO</a> |
		  <a style="color: white" target="_top" href="func.php-frame=top.htm" tppabs="http://fenix.jlceb.com/func.php?frame=top">SECCIONES</a> |
		  <a style="color: white" target="_top" href="func.php-frame=top&dirs=^dll-.htm" tppabs="http://fenix.jlceb.com/func.php?frame=top&dirs=^dll/">DLLs</a> |
		  Buscar Función: <input name="func" size="15" onfocus="select()"/> ]
	</div>
	</form>
	
<script language="JavaScript">
<!--

function SymError()
{
  return true;
}

window.onerror = SymError;

//-->
</script>

<script> document.forms[0].func.focus() </script>
	<table cellspacing="8pt"> <tr><td>  <b><a href="func.php-func=REGEX.htm" tppabs="http://fenix.jlceb.com/func.php?func=REGEX">REGEX</a></b> ( <B>EXPRESIÓN</B>, <B>CADENA</B> ) </td></tr> <tr><td style="padding-left: 40pt"> <p> Busca una expresión regular dentro de una cadena </p> </td></tr> <tr><td> <b>PARÁMETROS</b> </td></tr>
<tr><td style="padding-left: 28pt"> <table cellpadding="8pt"><tr><td nowrap valign="top">INT</td><td valign="top"><b>EXPRESIÓN</b></td><td valign="top"> : </td><td valign="top">Expresión regular</td></tr>
<tr><td nowrap valign="top">INT</td><td valign="top"><b>CADENA</b></td><td valign="top"> : </td><td valign="top">Cadena original</td></tr>
</table> </td></tr>
<tr><td> <b>VALOR DE RETORNO </b> </td></tr>
<tr><td style="padding-left: 40pt"> <p>INT &nbsp; : &nbsp; Posición encontrada o -1 si no se encontró</p> </td></tr> <tr><td> <b>DESCRIPCIÓN</b> </td></tr> 
		           <tr><td style="padding-left: 40pt"> <P> Dada una expresión regular, comprueba si la cadena dada la cumple en algún punto, y devuelve la posición (número de carácter desde la izquierda, empezando en 0) donde la encuentra, o -1 si no se cumple.</P> <P> Una expresión regular puede entenderse como una forma avanzada de búsqueda. La expresión regular puede ser una serie de caracteres corrientes como "abc", con lo que esta función se comportará igual que la función <a href="func.php-func=FIND.htm" tppabs="http://fenix.jlceb.com/func.php?func=FIND">FIND</a></A> haciendo una búsqueda. Pero la verdadera potencia es que la expresión regular puede contener toda una serie de caracteres "comodín" que tienen significados específicos. Los siguientes metacaracteres son reconocidos: <UL> <LI> ".": un punto quiere decir "cualquier carácter". Por ejemplo, "ab.de" permite encontrar "abcde" y "abJde", pero no "abde".</LI> <LI> "^": el exponencial quiere decir "principio de cadena" si la expresión regular empieza por ^. Por ejemplo, "^abc" permite encontrar "abcdef" pero no "fabcdef".</LI> <LI> "$": el dólar quiere decir "final de cadena" si la expresión regular acaba en $. Por ejemplo, "abc$" permite encontrar "deabc" pero no "abcde".</LI> <LI> "[]": los corchetes quieren decir "cualquier carácter de esta lista", y en su interior puede haber una serie de caracteres corrientes, o bien rangos de caracteres. Por ejemplo "[abc]" permite encontrar "a", "b" ó "c", mientras que "[a-z]" permite encontrar cualquier letra entre la "a" y la "z", inclusives. Los rangos pueden ser inacabados: "[- ]" permite encontrar cualquier carácter hasta el espacio, mientras "[ -]" permite encontrar cualquier carácter del espacio en adelante. Además, se reconocen "clases de caracteres" posix, que son secuencias predefinidas de caracteres que se escriben con la sintaxis "[:clase:]" y pueden ser cualquiera de las siguientes: [:alpha:] para cualquier letra, [:upper:] para letras mayúsculas, [:lower:] para minúsculas, [:alnum:] para letras o números, [:digit:] para números y [:space:] para espacios.</LI> <LI> "()": los paréntesis permiten agrupar secuencias de caracteres y metacaracteres. Esto tiene varias utilidades: <UL> <LI> Se pueden usar los metacaracteres de repetición como "*" o "?" después del paréntesis de cierre.</LI> <LI> Se pueden poner varias secuencias dentro de los paréntesis, separadas por el signo "|". La expresión encontrará cualquiera de las posibilidades. Por ejemplo, "(abc|efg)" encontrará "abcde" al igual que "defgh", pero no "bcdef".</LI> <LI> La función REGEX rellena un array de cadenas global llamado REGEX_REG[] con cada sección entre paréntesis de la cadena localizada, empezando por el índice 1.</LI></UL> Esta última posibilidad requiere mención aparte, ya que es muy potente, pues permite hacer cosas como buscar una fecha y localizar sus partes. La expresión regular "(..)/(..)/(....)" busca expresiones del estilo "10/04/1980" y rellena en REGEX_REG[1] el día, en REGEX_REG[2] el mes, y en REGEX_REG[3] el año.</LI> <LI> "*": Indica "0 o más repeticiones de lo anterior", donde "lo anterior" se refiere al último carácter o metacarácter. Este metacarácter, al igual que los metacaracteres de repetición que detallamos a continuación, es más útil concatenado detrás de secuencias con corchetes o paréntesis. Por ejemplo, "[abc]*" encuentra cualquier secuencia de 0 o más caracteres "a", "b", o "c". Es decir, "[abc]*" permite encontrar "aabc", "bbbcca", "bca" o "a". De la misma forma, "(abc)*" permite encontrar "abcabcabc", "abcabc" o "abc", pero no "aabbcc". Es importante tener en cuenta que 0 repeticiones también son válidas, por lo que la expresión regular "[abc]*" en realidad se cumple siempre, ya que cualquier cadena contiene 0 o más repeticiones de cualquier secuencia.</LI> <LI> "+": encuentra 1 o más repeticiones de lo anterior, del último carácter o metacaracter anterior a este símbolo. "[abc]+" encuentra "aabbcc" y "bccba", pero no "defg".</LI> <LI> "?": encuentra 0 ó 1 repeticiones de lo anterior. Es decir, permite marcar un trozo de la expresión como opcional.</LI> <LI> "{}": encuentra un rango de repeticiones de lo anterior. El rango son dos dígitos separados por comas, aunque uno de ellos puede omitirse. Por ejemplo, "[abc]{2,}" encuentra cualquier secuencia de dos o más caracteres "a", "b" o "c", mientras "[abc]{,4}" encuentra cualquier secuencia de hasta cuatro caracteres del mismo rango. Hay que tener en cuentra que si se omite el primer número, 0 también es un número válido de repeticiones. Si se especifica un número sólo, busca ese número exacto de repeticiones.</LI></UL></P> <P> El array global REGEX_REG de cadenas contendrá en el elemento 0 la sección de la cadena encontrada, y en los sucesivos elementos (del 1 en adelante, hasta 15), el resultado de cada sección marcada entre paréntesis en la expresión original.</P> </td></tr> <tr><td> <b>VEA TAMBIÉN</b> </td></tr>
<tr><td style="padding-left: 40pt"> <table cellpadding="6pt"><tr><td valign="top"><b><a href="func.php-func=REGEX_REPLACE.htm" tppabs="http://fenix.jlceb.com/func.php?func=REGEX_REPLACE">REGEX_REPLACE</a></b></td><td>&nbsp;</td><td>Busca una expresión regular dentro de una cadena, y sustituye cada coincidencia por el nuevo texto indicado</td></tr>
</table> </td></tr>

	</table>
		
</body>
</html>


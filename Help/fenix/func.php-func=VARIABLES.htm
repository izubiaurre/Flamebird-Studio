<html><?xml version="1.0" encoding="ISO-8859-1"?><!DOCTYPE html 
     PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
         "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
<title>
	Referencia de Fenix
</title>
<style>
	body	{ font-family: Verdana; font-size: 15px }
	a	{ text-decoration: none; color: #c00000; font-weight: bold }
	a:hover { color: #ff6600 }
	thead	{ background: black; color: white; padding: 4pt }
	li	{ padding: 4pt; padding-left: 12pt }
	pre	{ padding: 8pt; padding-left: 12pt; border: solid black 1px; background-color: white; margin-right: 40px }
	td      { padding: 4pt; vertical-align: top; }
	th      { padding: 4pt; vertical-align: top; background: #E0E0F0; text-align: left; width: 200px }
	body    { background: #F0F0F0 }
</style>
</head>
<body>

	<form action="func.php-func=.htm" tppabs="http://fenix.jlceb.com/func.php?func=">
	<div style=" 
		color: #A0A0A0; 
		border: outset #600000 2px; 
		background: #660000;
		text-align: center; 
		vertical-align: middle;
		font-weight: bold;
		height: 24px;
		margin: 0px; ">
		[ <a style="color: white" href="func.php-funcs=^(dll-){0}.htm" tppabs="http://fenix.jlceb.com/func.php?funcs=^(dll/){0}">TODO</a> |
		  <a style="color: white" target="_top" href="func.php-frame=top.htm" tppabs="http://fenix.jlceb.com/func.php?frame=top">SECCIONES</a> |
		  <a style="color: white" target="_top" href="func.php-frame=top&dirs=^dll-.htm" tppabs="http://fenix.jlceb.com/func.php?frame=top&dirs=^dll/">DLLs</a> |
		  Buscar Función: <input name="func" size="15" onfocus="select()"/> ]
	</div>
	</form>
	
<script language="JavaScript">
<!--

function SymError()
{
  return true;
}

window.onerror = SymError;

//-->
</script>

<script> document.forms[0].func.focus() </script>
	<table cellspacing="8pt"><tr><td style="padding-left: 0pt"><font color=#800000>[ tipo ] <I> nombre</I> [ dimensiones ] [ <B> =</B> valor ] ;</font></td></tr>
 </td></tr> <tr><td style="padding-left: 40pt"> <p> Una variable es un dato que dispone de un tipo y un nombre </p> </td></tr>  <tr><td> <b>DESCRIPCIÓN</b> </td></tr> 
		           <tr><td style="padding-left: 40pt"> <P> Cada dato concreto en un programa es una <B> variable</B> , que se diferencia de una <B> constante</B> en que su contenido puede ser modificado en todo momento y no sólo consultado.</P> <P> Fenix conoce una variedad de <a href="javascript:if(confirm('http://fenix.jlceb.com/func.php?func=Tipos de dato  \n\nThis file was not retrieved by Teleport Pro, because it is linked too far away from its Starting Address. If you increase the in-domain depth setting for the Starting Address, this file will be queued for retrieval.  \n\nDo you want to open it from the server?'))window.location='http://fenix.jlceb.com/func.php?func=Tipos de dato'" tppabs="http://fenix.jlceb.com/func.php?func=Tipos de dato">Tipos de dato</a></A> . La variable puede contener, según su tipo de dato, un número entero, un número con decimales, un texto, o incluso una tabla o un conjunto de otros datos diferentes.</P> <P> Una variable se declara siempre con la misma sintaxis: primero, se escribe el tipo de dato (por ejemplo, <a href="func.php-func=INT.htm" tppabs="http://fenix.jlceb.com/func.php?func=INT">INT</a></A> o <a href="javascript:if(confirm('http://fenix.jlceb.com/func.php?func=STRING  \n\nThis file was not retrieved by Teleport Pro, because it is linked too far away from its Starting Address. If you increase the in-domain depth setting for the Starting Address, this file will be queued for retrieval.  \n\nDo you want to open it from the server?'))window.location='http://fenix.jlceb.com/func.php?func=STRING'" tppabs="http://fenix.jlceb.com/func.php?func=STRING">STRING</a></A> y, a continuación, el nombre de la variable. Después del nombre se puede declarar la variable como un array (ver más adelante) indicando sus dimensiones, o bien inicializar la variable con un contenido por defecto. Ambas posibilidades son opcionales. Por último, la declaración de la variable termina siempre con un punto y coma.</P> <P> El tipo de variable es opcional: es válido declarar una variable simplemente escribiendo su nombre. En ese caso, el tipo de variable se asume como <a href="func.php-func=INT.htm" tppabs="http://fenix.jlceb.com/func.php?func=INT">INT</a></A> (variable que puede contener un número entero).</P> <P> El nombre de una variable es un identificador. Los <a href="javascript:if(confirm('http://fenix.jlceb.com/func.php?func=identificadores  \n\nThis file was not retrieved by Teleport Pro, because it is linked too far away from its Starting Address. If you increase the in-domain depth setting for the Starting Address, this file will be queued for retrieval.  \n\nDo you want to open it from the server?'))window.location='http://fenix.jlceb.com/func.php?func=identificadores'" tppabs="http://fenix.jlceb.com/func.php?func=identificadores">identificadores</a></A> en Fenix son una palabra que empieza por una letra o bien por el signo _ y que puede contener únicamente letras, números o el signo _. No importa si el identificador se escribe en mayúsculas o minúsculas, aunque si se hacen servir acentos o caracteres internacionales, el identificador debe escribirse siempre con los mismos acentos o caracteres. No es posible usar como nombre de variable una palabra clave que identifica una sentencia o directiva del lenguaje. Los siguientes identificadores son válidos: <PRE> Contador31 <BR></BR> _valor_ <BR></BR> i</PRE> Sin embargo, los siguientes identificadores no son válidos: <PRE> 80v <BR></BR> una variable <BR></BR> while</PRE></P> <H3> Arrays</H3> <P> Un array es un vector de datos. En lugar de contener un sólo dato del tipo especificado, como las variables normales, el array contiene un número predeterminado de datos de ese mismo tipo.</P> <P> El array es la forma básica de hacer tablas de datos. Cuando tienes que guardar listas de información, como por ejemplo una tabla de records o información sobre una serie de casillas de un mapa, el array es la forma más sencilla de hacerlo.</P> <P> Los elementos de un array son accedidos mediante un único nombre y un número de índice que distingue uno de los datos del array de otro. El índice empieza siempre en cero. Para declarar un array, escribe la declaración de la variable de la forma normal pero, justo a continuación del nombre, escribe entre corchetes [ ] el número máximo de índice que puede aparecer en el array. Por ejemplo, la siguiente declaración: <PRE> <a href="func.php-func=INT.htm" tppabs="http://fenix.jlceb.com/func.php?func=INT">INT</a></A> Valores[9];</PRE> sirve para crear una lista de diez números enteros, cuyos índices van desde 0 hasta 9.</P> <P> En el interior de tu programa, haces referencia al array escribiendo su nombre. Sin embargo, esto accede sólo a su primer elemento, como si fuera una variable normal (el elemento de índice 0). Para poder hacer referencia al resto, usa la misma sintaxis para indicar su índice: variable[índice]. Dentro del código puedes usar cualquier expresión para indicar el índice. Habitualmente se usan bucles con variables como contador para realizar operaciones con todos o con una sección de los elementos de un array.</P> <H3> Arrays multidimensionales</H3> <P> Los arrays vistos hasta ahora son listas, pero también es posible crear arrays que sean tablas añadiendo nuevas dimensiones con la misma sintaxis. Por ejemplo, la siguiente declaración: <PRE> <a href="func.php-func=INT.htm" tppabs="http://fenix.jlceb.com/func.php?func=INT">INT</a></A> Valores[9][9];</PRE> crea una tabla de 10 x 10 números enteros, con un índice para las filas (de 0 a 9) y otro para las columnas (también de 0 a 9).</P> <P> Para acceder a un elemento de un array multidimensional, usa la misma sintaxis que para declararlo. Por ejemplo, Valores[4][5] hace referencia a un número aproximadamente hacia el centro de la tabla anterior.</P> <P> Puedes entender que un array multidimensional es un "array de arrays": cada entrada del array contiene a su vez otro array. En realidad, puedes añadir más de dos dimensiones, hasta un límite de unas cinco dimensiones (en función del tipo de dato usado), aunque rara vez tendrás necesidad de hacer arrays tan complejos. Además, cada nueva dimensión multiplica el número de elementos presentes (y la memoria ocupada por el array) de forma considerable.</P> <H3> Estructuras</H3> <P></P> <H3> Inicialización de variables</H3> <P></P> </td></tr> 
	</table>
		
</body>
</html>


// LAN FUNCION DEFINITION FILE FROM FB2
// MADE BY: VIATOR IN: 12/DIC/2004. MODIFIED BY DANKO IN 25/ENE/2007
// LAST UPDATE: 12/12/2004. 25/ENE/2007
// FENIX COMPARIBILITY: FENIX 0.84B
//
// FB2Team 2004/2005 (c) GNU GENERAL PUBLIC LICENSE

** DEPURADO *************************************************************************************************************************************

[say]
QOfPrototipes = 1
Prototipe     = say ( string MESSAGE )

** MATEMATICAS **********************************************************************************************************************************

[rand]
QOfPrototipes = 1
Prototipe     = int rand ( int MIN, int MAX )

[rand_seed]
QOfPrototipes = 1
Prototipe     = rand_seed ( int SEED )

[abs]
QOfPrototipes = 1
Prototipe     = int abs ( int NUMBER )

[pow]
QOfPrototipes = 1
Prototipe     = float pow ( float NUMBER, float POW )

[fget_angle]
QOfPrototipes = 1
Prototipe     = int fget_angle ( int X1, int Y1, int X2, int Y2 )

[fget_dist]
QOfPrototipes = 1
Prototipe     = int fget_dist ( int X1, int Y1, int X2, int Y2 )

[near_angle]
QOfPrototipes = 1
Prototipe     = int near_angle ( int ANGLE1, int ANGLE2, int MAX_INC )

[advance]
QOfPrototipes = 1
Prototipe     = advance ( int DISTANCE )

[xadvance]
QOfPrototipes = 1
Prototipe     = xadvance ( int ANGLE, int DISTANCE )

[sqrt]
QOfPrototipes = 1
Prototipe     = float sqrt ( float NUMBER )

[cos]
QOfPrototipes = 1
Prototipe     = float cos ( float ANGLE )

[sin]
QOfPrototipes = 1
Prototipe     = float sin ( float ANGLE )

[tan]
QOfPrototipes=1
Prototipe=float TAN ( float ANGLE )

[acos]
QOfPrototipes = 1
Prototipe     = float acos ( float NUMBER )

[asin]
QOfPrototipes = 1
Prototipe     = float asin ( float NUMBER )

[atan]
QOfPrototipes = 1
Prototipe     = float atan ( float NUMBER )

** INTERACCIÓN ENTRE PROCESOS *******************************************************************************************************************

[get_angle]
QOfPrototipes = 1
Prototipe     = int get_angle ( int PROCESS_ID )

[get_dist]
QOfPrototipes = 1
Prototipe     = int get_dist ( int PROCESS_ID )

[get_distx]
QOfPrototipes = 1
Prototipe     = int get_distx ( int ANGLE, int DISTANCE )

[get_disty]
QOfPrototipes = 1
Prototipe     = int get_disty ( int ANGLE, int DISTANCE )

[get_id]
QOfPrototipes = 1
Prototipe     = int get_id (int TYPE)

[collision]
QOfPrototipes = 2
Prototipe     = int collision ( int TYPE )
Prototipe2    = int collision ( int ID )

[signal]
QOfPrototipes = 1
Prototipe     = signal ( int PROCESS, int SIGNAL )

[let_me_alone]
QOfPrototipes = 1
Prototipe     = let_me_alone ( )

[exit]
QOfPrototipes = 3
Prototipe     = exit ( string TEXT, int NUMBER )
Prototipe2    = exit ( string TEXT )
Prototipe3    = exit ( )

** ENTRADA/SALIDA *******************************************************************************************************************************

[key]
QOfPrototipes = 1
Prototipe     = int key ( int KEY )

[get_joy_button]
QOfPrototipes = 1
Prototipe     = int get_joy_button ( int BUTTON )

[get_joy_position]
QOfPrototipes = 1
Prototipe     = int get_joy_position ( int AXIS )

[select_joy]
QOfPrototipes = 1
Prototipe     = int select_joy ( int JOYSTICK )

[number_joy]
QOfPrototipes = 1
Prototipe     = int select_joy ( )

** INICIALIZACIÓN Y CARGA ***********************************************************************************************************************

[set_mode]
QOfPrototipes = 4
Prototipe     = set_mode ( int MODE )
Prototipe2    = set_mode ( int WIDE, int HIGH )
Prototipe3    = set_mode ( int WIDE, int HIGH, int BPP )
Prototipe4    = set_mode ( int WIDE, int HIGH, int BPP, int FLAGS )

[set_fps]
QOfPrototipes = 1
Prototipe     = set_fps ( int FPS, int JUMP )

[load_map]
QOfPrototipes = 1
Prototipe     = int load_map ( string FILE )

[load_fpg]
QOfPrototipes = 2
Prototipe     = int load_fpg ( string FILE )
Prototipe2    = int load_fpg ( string FILE , pointer RETURN )

[unload_map]
QOfPrototipes = 1
Prototipe     = unload_map ( int LIBRARY, int GRAPHIC )

[unload_fpg]
QOfPrototipes = 1
Prototipe     = unload_fpg ( int LIBRARY )

[graphic_set]
QOfPrototipes = 1
Prototipe     = graphic_set ( int LIBRARY, int GRAPHIC, int TYPE, int NUMBER )

[graphic_info]
QOfPrototipes = 1 
Prototipe     = int graphic_info ( int LIBRARY, int GRAPHIC, int TYPE )

** PUNTOS DE CONTROL ****************************************************************************************************************************

[get_point]
QOfPrototipes = 1
Prototipe     = get_point ( int LIBRARY, int GRAPHIC, int POINT, pointer X, pointer Y )

[get_real_point]
QOfPrototipes = 1
Prototipe     = get_real_point ( int POINT, pointer X, pointer Y )

[set_point]
QOfPrototipes = 1
Prototipe     = set_point ( int LIBRARY, int GRAPHIC, int POINT, int X, int Y)

[set_center]
QOfPrototipes = 1
Prototipe     = set_center ( int LIBRARY, int GRAPHIC, int X, int Y )

** REGIONES *************************************************************************************************************************************

[define_region]
QOfPrototipes = 1
Prototipe     = define_region ( int REGION, int X, int Y, int WIDE, int HIGH )

[out_region]
QOfPrototipes = 1
Prototipe     = int out_region (int PROCESS, int REGION)

** FONDO DE PANTALLA ****************************************************************************************************************************

[put]
QOfPrototipes = 1
Prototipe     = put ( int LIBRARY, int GRAPHIC, int X, int Y )

[xput]
QOfPrototipes = 1
Prototipe     = xput ( int LIBRARY, int GRAPHIC, int X, int Y, int ANGLE, int SIZE, int FRLAGS, int REGION )

[put_pixel]
QOfPrototipes = 1
Prototipe     = put_pixel ( int X, int Y, int COLOR )

[put_screen]
QOfPrototipes = 1
Prototipe     = put_screen ( int LIBRERY, int GRAPHIC )

[clear_screen]
QOfPrototipes = 1
Prototipe     = clear_screen ( )

[get_pixel]
QOfPrototipes = 1
Prototipe     = int get_pixel ( int X, int Y )

** BITMAPS **************************************************************************************************************************************

[map_block_copy]
QOfPrototipes = 1
Prototipe     = map_block_copy ( int LIBRARY, int TARGET, int TX, int TY, int SOURCE, int SX, int SY, int WIDE, int HIGH )

[map_get_pixel]
QOfPrototipes = 1
Prototipe     = int map_get_pixell ( int LIBRARY, int GRAPHIC, int X, int Y )

[map_put]
QOfPrototipes = 1
Prototipe     = map_put ( int LIBRARY, int GRAPHIC_1, int GRAPHIC_2, int X, int Y )

[map_xput]
QOfPrototipes = 1
Prototipe     = map_xput ( int LIBRARY, int GRAPHIC_1, int GRAPHIC_2, int X, int Y, int ANGLE, int SIZE, int FLAGS, int REGION )

[map_put_pixel]
QOfPrototipes = 1
Prototipe     = map_put_pixel ( int LIBRARY, int GRAPHIC, int X, int Y, int COLOR )

[new_map]
QOfPrototipes = 1
Prototipe     = int new_map ( int WIDE, int HIGH, int BPP)

[map_clear]
QOfPrototipes = 1
Prototipe     = map_clear ( int LIBRARY, int GRAPHIC, int COLOR )

[map_clone]
QOfPrototipes = 1
Prototipe     = int map_clone (int LIBRARY, int GRAPHIC)

[map_name]
QOfPrototipes = 1
Prototipe     = map_name ( )

[map_set_name]
QOfPrototipes = 1
Prototipe     = map_set_name (int LIBRARY, int GRAPHIC, string NAME )

[map_exists]
QOfPrototipes = 1
Prototipe     = int map_exists ( int LIBRARY, int GRAPHIC )

[map_xputnp]
QOfPrototipes = 1
Prototipe     = int map_xputnp (int FILE_TRG, int GRAPH_TRG, int FILE_SRC, int GRAPH_SRC, int X, int Y, int ANGLE, int SCALE_X, int SCALE_Y, int FLAGS)

[fpg_exists]
QOfPrototipes = 1
Prototipe     = int fpg_exists ( int LIBRARY )

** FPG ******************************************************************************************************************************************

[fpg_add]
QOfPrototipes = 1
Prototipe     = fpg_add ( int LIBRARY, int GRAPHIC, int SRC_LIBRARY, int SRC_GRAPHIC )

[new_fpg]
QOfPrototipes = 1
Prototipe     = new_fpg ( )

[fpg_new]
QOfPrototipes = 1
Prototipe     = fpg_new ( )

** TEXTOS ***************************************************************************************************************************************

[load_fnt]
QOfPrototipes = 1
Prototipe     = int load_fnt ( string FILE )

[unload_fnt]
QOfPrototipes = 1
Prototipe     = unload_fnt ( int FONT )

[write]
QOfPrototipes = 1
Prototipe     = int write ( int FONT, int X, int Y, int TYPE, string TEXT )

[write_int]
QOfPrototipes = 1
Prototipe     = int write_int ( int FONT, int X, int Y, int TYPE, pointer VAR )

[move_text]
QOfPrototipes = 1
Prototipe     = move_text ( int MOVE, intX, int Y )

[delete_text]
QOfPrototipes = 1
Prototipe     = delete_text ( int TEXT )

[write_in_map]
QOfPrototipes = 1
Prototipe     = int write_in_map (int FONT, int TYPE, string TEXT)

[text_width]
QOfPrototipes = 1
Prototipe     = int text_width (int FONT, string TEXT)

[text_height]
QOfPrototipes = 1
Prototipe     = int text_height ( int FONT, string TEXT )

[save_fnt]
QOfPrototipes = 1
Prototipe     = save_fnt ( int FONT, string FILE )

[load_bdf]
QOfPrototipes = 1
Prototipe     = load_bdf ( string FILE )

** FECHA ****************************************************************************************************************************************

[time]
QOfPrototipes= 1
Prototipe    = int time ( )

[ftime]
QOfPrototipes = 1
Prototipe     = string ftime ( string FORMAT, int TIME )

** FICHEROS *************************************************************************************************************************************

[save]
QOfPrototipes = 1
Prototipe     = int save ( string FILE, varspace VAR )

[load]
QOfPrototipes = 1
Prototipe     = int load ( string FILE, varspace VAR )

[fopen]
QOfPrototipes = 1
Prototipe     = int fopen ( string FILE, int TYPE )

[fclose]
QOfPrototipes = 1
Prototipe     = fclose ( int FILE )

[fread]
QOfPrototipes = 1
Prototipe     = int fread ( int FILE, varspace VAR)

[fwrite]
QOfPrototipes = 1
Prototipe     = int fwrite ( int FILE, varspace VAR)

[fseek]
QOfPrototipes = 1
Prototipe     = fseek ( int FILE, int POSITION, int TYPE )

[ftell]
QOfPrototipes = 1
Prototipe     = int ftell ( int FILE )

[flength]
QOfPrototipes = 1
Prototipe     = int flength ( int FILE )

[fputs]
QOfPrototipes = 1
Prototipe     = int fputs ( int FILE, string STRING )

[fgets]
QOfPrototipes = 1
Prototipe     = string fgets ( int FILE )

[feof]
QOfPrototipes = 1
Prototipe     = int feof ( int FILE )

[file]
QOfPrototipes = 1
Prototipe     = string file ( string FILE )

** MODO7 ****************************************************************************************************************************************

[start_mode7]
QOfPrototipes = 1
Prototipe     = start_mode7 ( int NUMBER, int LIBRARY, int GFX_INT, int GFX_EXT, int REGION, int HORIZON )

[stop_mode7]
QOfPrototipes = 1
Prototipe     = stop_mode7 ( int NUMBER )

** SCROLL ***************************************************************************************************************************************

[start_scroll]
QOfPrototipes = 1
Prototipe     = start_scroll ( int NUMBER, int LIBRERY, int GRAPHIC, int BACKGROUND, int REGION, int FLAGS )

[stop_scroll]
QOfPrototipes = 1
Prototipe     = stop_scroll ( int NUMBER )

[move_scroll]
QOfPrototipes = 1
Prototipe     = move_scroll ( int NUMBER )

** ANIMACIONES FLI ******************************************************************************************************************************

[start_fli]
QOfPrototipes = 1
Prototipe     = int start_fli ( string NAME, int X, int Y )

[end_fli]
QOfPrototipes = 1
Prototipe     = end_fli ( )

[frame_fli]
QOfPrototipes = 1
Prototipe     = int frame_fli ( )

[reset_fli]
QOfPrototipes = 1
Prototipe     = reset_fli ( )

** TRATAMIENTO DE CADENAS ***********************************************************************************************************************

[len]
QOfPrototipes = 1
Prototipe     = int len ( string STRING )

[ucase]
QOfPrototipes = 1
Prototipe     = string ucase ( string STRING )

[lcase]
QOfPrototipes = 1
Prototipe     = string lcase ( string STRING )

[substr]
QOfPrototipes = 2
Prototipe     = string substr ( string STRING, int BEGINING, int END )
Prototipe2    = string substr ( string STRING, int BEGINING )

[find]
QOfPrototipes = 2
Prototipe     = int find ( string STRING, string FOUND )
Prototipe2    = int find ( string STRING, string FOUND , int BEGINING)

[itoa]
QOfPrototipes = 1
Prototipe     = string itoa ( int INTEGER )

[ftoa]
QOfPrototipes = 1
Prototipe     = string ftoa ( float FLOAT )

[atoi]
QOfPrototipes = 1
Prototipe     = int atoi ( string STRING )

[atof]
QOfPrototipes = 1
Prototipe     = float atof ( string STRING )

[asc]
QOfPrototipes = 1
Prototipe     = byte asc ( string STRING )

[chr]
QOfPrototipes = 1
Prototipe     = string chr ( byte NUMBER )

** EXTENSIONES ADICIONALES **********************************************************************************************************************

[load_png]
QOfPrototipes = 1
Prototipe     = int load_png ( string FILE )

[load_pcx]
QOfPrototipes = 1
Prototipe     = int load_pcx ( string FILE )

[map_buffer]
QOfPrototipes = 1
Prototipe     = pointer map_buffer ( int LIBRARY, int GRAPHIC )

[set_colors]
QOfPrototipes = 1
Prototipe     = set_colors ( int FIRST, int NUMBER, pointer COLOR )

[get_colors]
QOfPrototipes = 1
Prototipe     = get_colors ( int FIRST, int NUMBER, pointer PAL )

[alloc]
QOfPrototipes = 1 
Prototipe     = pointer alloc ( int BYTES )

[free]
QOfPrototipes = 1
Prototipe     = free ( pointer MEM )

[realloc]
QOfPrototipes = 1
Prototipe     = pointer realloc ( pointer MEM, int BYTES )

[exists]
QOfPrototipes = 1
Prototipe     = int exists ( int PROCESS )

[memset]
QOfPrototipes = 1
Prototipe     = memset ( pointer MEM, byte NUMBER, int BYTES )

[memsetw]
QOfPrototipes = 1
Prototipe     = memsetw ( pointer MEM, word NUMBER, int WORDS )

[memcopy]
QOfPrototipes = 1
Prototipe     = memcopy ( pointer TARGET, pointer SOURCE, int BYTES )

[memory_total]
QOfPrototipes = 1
Prototipe     = float memory_total ( )

[memory_free]
QOfPrototipes = 1
Prototipe     = int memory_free ( )

** FUNCIONES DE PRIMITIVAS **********************************************************************************************************************

[drawing_map]
QOfPrototipes = 1
Prototipe     = drawing_map ( int LIBRARY, int GRAPHIC )

[drawing_color]
QOfPrototipes = 1
Prototipe     = drawing_color ( int COLOR )

[draw_line]
QOfPrototipes = 1
Prototipe     = draw_line ( int X1, int Y1, int X2, int Y2 )

[draw_rect]
QOfPrototipes = 1
Prototipe     = draw_rect (int X1, int Y1, int X2, int Y2)

[draw_box]
QOfPrototipes = 1
Prototipe     = draw_box (int X1, int Y1, int X2, int Y2)

[draw_circle]
QOfPrototipes = 1
Prototipe     = draw_circle (int X, int Y, int RADIO)
  
[draw_fcircle]
QOfPrototipes = 1
Prototipe     = draw_fcircle (int X, int Y, int RADIO)

[set_text_color]
QOfPrototipes = 1
Prototipe     = set_text_color ( int COLOR )

** BUSQUEDA DE CAMINOS **************************************************************************************************************************

[path_find]
QOfPrototipes = 1
Prototipe     = int PATH_FIND ( int LIBRARY, int GRAPHIC, int X1, int Y1, int X2, int Y2, int OPTIONS )

[path_getxy]
QOfPrototipes = 1
Prototipe     = int PATH_GETXY ( pointer X, pointer Y )

[path_wall]
QOfPrototipes = 1
Prototipe     = int PATH_WALL ( int NUMBER )

** BLENDOPS *************************************************************************************************************************************

[blendop_new]
QOfPrototipes = 1
Prototipe     = int blendop_new ( )

[blendop_identity]
QOfPrototipes = 1
Prototipe     = blendop_identity ( int BLENDOP )

[blendop_tint]
QOfPrototipes = 1
Prototipe     = blendop_tint ( int BLENDOP, float AMOUNT, byte R, byte G, byte B )

[blendop_translucency]
QOfPrototipes = 1
Prototipe     = blendop_translucency ( int BLENDOP, float AMOUNT )

[blendop_intensity]
QOfPrototipes = 1
Prototipe     = blendop_intensity ( int BLENDOP, float AMOUNT )

[blendop_swap]
QOfPrototipes = 1
Prototipe     = blendop_swap ( int BLENDOP )

[blendop_assign]
QOfPrototipes = 1
Prototipe     = blendop_assign ( int LIBRERY, int GRAPHIC, int BLENDOP )

[blendop_apply]
QOfPrototipes = 1
Prototipe     = blendop_apply ( int LIBRERY, int GRAPHIC, int BLENDOP )

[blendop_free]
QOfPrototipes = 1
Prototipe     = blendop_free ( int BLENDOP )

[blendop_grayscale]
QOfPrototipes = 1
Prototipe     = blendop_grayscale ( int BLENDOP , int METOD)

** WM *******************************************************************************************************************************************

[set_title]
QOfPrototipes = 1
Prototipe     = set_title ( string TITLE )

[set_icon]
QOfPrototipes = 1
Prototipe     = set_icon ( int FPG, int GRAPHIC )

** EXTENDED WRITE *******************************************************************************************************************************

[write_var]
QOfPrototipes = 1
Prototipe     = int write_var ( int FONT, int X, int Y, int TYPE, varspace VAR )

[write_float]
QOfPrototipes = 1
Prototipe     = int write_float ( int FONT, int X, int Y, int TYPE, pointer FLOAT )

[write_string]
QOfPrototipes = 1
Prototipe     = int write_string ( int FONT, int X, int Y, int TYPE, pointer STRING )

** NUEVAS FUNCIONES DE SONIDO *******************************************************************************************************************

[load_song]
QOfPrototipes = 1
Prototipe     = load_song ( string FILE )

[play_song]
QOfPrototipes = 1
Prototipe     = int play_song ( int SONG, int LOOP )

[unload_song]
QOfPrototipes = 1
Prototipe     = unload_song ( int SONG )

[stop_song]
QOfPrototipes = 1
Prototipe     = stop_song ( )

[pause_song]
QOfPrototipes = 1
Prototipe     = pause_song ( )

[resume_song]
QOfPrototipes = 1
Prototipe     = resume_song ( )

[set_song_volume]
QOfPrototipes = 1
Prototipe     = set_song_volume ( int VOLUME )

[is_playing_song]
QOfPrototipes = 1
Prototipe     = int is_playing_song ( )

[load_wav]
QOfPrototipes = 1
Prototipe     = int load_wav ( string FILE )

[play_wav]
QOfPrototipes = 1
Prototipe     = play_wav ( int WAV, int LOOP )

[unload_wav]
QOfPrototipes = 1
Prototipe     = unload_wav ( int WAV )

[pause_wav]
QOfPrototipes = 1
Prototipe     = pause_wav ( int WAV )

[resume_wav]
QOfPrototipes = 1
Prototipe     = resume_wav ( int WAV )

[is_playing_wav]
QOfPrototipes = 1
Prototipe     = is_playing_wav ( int WAV )

[set_wav_volume]
QOfPrototipes = 1
Prototipe     = set_wav_volume ( int WAV, int VOLUME )

[fade_music_in]
QOfPrototipes = 1
Prototipe     = fade_music_in ( int SONG, int LOOP, int TIME )

[fade_music_off]
QOfPrototipes = 1
Prototipe     = fade_music_off ( int TIME )

[set_panning]
QOfPrototipes = 1
Prototipe     = set_panning ( int WAV, int LEFT, int RIGHT )

[set_position]
QOfPrototipes = 1
Prototipe     = set_position ( int WAV, int ANGLE, int DISTANCE )

[set_distance]
QOfPrototipes = 1
Prototipe     = set_distance ( int WAV, int DISTANCE )

[reverse_stereo]
QOfPrototipes = 1
Prototipe     = reverse_stereo ( int WAV, int FLIP )

** FUNCIONES DE MAQ *****************************************************************************************************************************

[grayscale]
QOfPrototipes = 1
Prototipe     = grayscale ( int LIBRARY, int GRAPHIC, byte TYPE )

[rgbscale]
QOfPrototipes = rgbscale
Prototipe     = rgbscale ( int LIBRARY, int GRAPHIC, float R, float G, float B )

[blur]
QOfPrototipes = 1
Prototipe     = blur ( int LIBRARY, int GRAPHIC, byte TYPE )

[filter]
QOfPrototipes = 1
Prototipe     = filter ( int LIBRARY, int GRAPHIC, pointer ARRAY )

[quicksort]
QOfPrototipes = 1
Prototipe     = quicksort ( pointer ARRAY, int SIZE, int NUMBER, int OFFSET, byte SIZE_O, byte TYPE )

** PALETAS DE COLORES ***************************************************************************************************************************

[load_pal]
QOfPrototipes = 1
Prototipe     = load_pal ( string FILE )

[fade]
QOfPrototipes = 1
Prototipe     = fade ( int R, int G, int B, int SPEED, int DIR )

[fade_on]
QOfPrototipes = 1
Prototipe     = fade_on ( )

[fade_off]
QOfPrototipes = 1
Prototipe     = fade_off ( )

[roll_palette]
QOfPrototipes = 1
Prototipe     = roll_palette ( int FIRST, int NUMBER, int DES )

[convert_palette]
QOfPrototipes = 1
Prototipe     = convert_palette ( int LIBRARY, int GRAPHIC, pointer ARRAY )

[find_color]
QOfPrototipes = 1
Prototipe     = int find_color ( int R, int G, int B )

[rgb]
QOfPrototipes = 1
Prototipe     = int rgb ( int R, int G, int B )

[get_rgb]
QOfPrototipes = 1
Prototipe     = get_rgb ( int COLOR, pointer R, pointer G, pointer B )

** NUEVAS FUNICONES EN LA 0.83 ******************************************************************************************************************

[get_screen]
QOfPrototipes = 1
Prototipe     = int get_screen ( )

[trim]
QOfPrototipes = 1
Prototipe     = stirng trim ( string STRING )

[format]
QOfPrototipes = 3
Prototipe     = stirng trim ( int NUMBER )
Prototipe2    = stirng trim ( float NUMBER )
Prototipe3    = stirng trim ( float NUBER, int DECIMALS )

[strrev]
QOfPrototipes = 1
Prototipe     = stirng strrev ( string STRING )

[lpad]
QOfPrototipes = 1
Prototipe     = stirng lpad ( string STRING, int NUMBER)

[rpad]
QOfPrototipes = 1
Prototipe     = stirng rpad ( string STRING, int NUMBER)

[strcasecmp]
QOfPrototipes = 1
Prototipe     = int strcasecmp ( string STRING1, string STRING2 )

[save_png]
QOfPrototipes = 1
Prototipe     = save_png ( int LIBRARY, int GRAPHIC, string FILE )

[regex]
QOfPrototipes = 1
Prototipe     = int regex ( string EXPRESION, string STRING )

[regex_replace]
QOfPrototipes = 1
Prototipe     = int regex_replace ( string EXPRESION, string REPLACE, string STRING )

[split]
QOfPrototipes = 1
Prototipe     = int regex_replace ( string EXPRESION, string STRING , pointer ARRAY, int SIZE )

[join]
QOfPrototipes = 1
Prototipe     = join ( string SEPARATOR, pointer ARRAY , int SIZE )

[draw_curve]
QOfPrototipes = 1
Prototipe     = int draw_curve ( int X1, int Y1, int X2, int Y2, int X3, int Y3, int X4, int Y4 , int NUMBER)

[drawing_z]
QOfPrototipes = 1
Prototipe     = drawing_z ( int NUMBER )

[delete_draw] 
QOfPrototipes = 1
Prototipe     = delete_draw ( int DRAW )

[move_draw]
QOfPrototipes = 1
Prototipe     = move_draw ( int DRAW , int X, int Y )

[drawing_alpha]
QOfPrototipes = 1
Prototipe     = drawing_alpha ( int NUMBER )

** NUEVAS FUNCIONES EN LA 0.84 ******************************************************************************************************************

[cd]
QOfPrototipes = 2
Prototipe     = string cd ( )
Prototipe2    = string cd ( string DIR )

[chdir]
QOfPrototipes = 1
Prototipe     = int chdir ( string DIR )

[mkdir]
QOfPrototipes = 1
Prototipe     = int mkdir ( string DIR )

[rmdir]
QOfPrototipes = 1
Prototipe     = int rmdir ( string DIR )

[file_exists]
QOfPrototipes = 1
Prototipe     = int file_exists ( string FILE )

[glob]
QOfPrototipes = 1
Prototipe     = string file_exists ( string SEARCH )

[get_text_color]
QOfPrototipes = 1
Prototipe     = int get_text_color ( )

[new_fnt]
QOfPrototipes = 1
Prototipe     = int new_fnt ( int BPP )

[fnt_new]
QOfPrototipes = 1
Prototipe     = int fnt_new ( int BPP )

[get_glyph]
QOfPrototipes = 1
Prototipe     = int get_glyph ( int FONT, int NUMBER )

[set_glyph]
QOfPrototipes = 1
Prototipe     = int set_glyph ( int FONT, int NUMBER , int LIBRARY, int GRAPHIC )

[drawing_stipple]
QOfPrototipes = 1
Prototipe     = drawing_stipple ( int KIND )

[save_pal]
QOfPrototipes = 1
Prototipe     = int save_pal ( int FILE )

** NUEVAS FUNCIONES EN LA 0.85 ******************************************************************************************************************

[load_fbm]
QOfPrototipes = 1
Prototipe     = int load_fbm ( string FILE )

[save_fbm]
QOfPrototipes = 1
Prototipe     = int load_fbm ( int LIBRARY, int GRAPHIC, string FILE )

[load_fgc]
QOfPrototipes = 2
Prototipe     = int load_fgc ( string FILE )
Prototipe2    = int load_fgc ( string FILE , pointer RETURN )

[save_fgc]
QOfPrototipes = 1
Prototipe     = int save_fgc ( int LIBRARY, string FILE )

[cd_drives]
QOfPrototipes = 1
Prototipe     = int cd_drives ( )

[cd_status]
QOfPrototipes = 1
Prototipe     = int cd_status ( int ID )

[cd_name]
QOfPrototipes = 1
Prototipe     = string cd_name ( int ID )

[cd_getinfo]
QOfPrototipes = 1
Prototipe     = int cd_getinfo ( int ID )

[cd_play]
QOfPrototipes = 2
Prototipe     = int cd_getinfo ( int ID )
Prototipe2    = int cd_getinfo ( int ID , int TRACKS )

[cd_stop]
QOfPrototipes = 1
Prototipe     = cd_stop ( int ID )

[cd_pause]
QOfPrototipes = 1
Prototipe     = cd_pause ( int ID )

[cd_resume]
QOfPrototipes = 1
Prototipe     = cd_resume ( int ID )

[cd_eject]
QOfPrototipes = 1
Prototipe     = cd_eject ( int ID )

[minimize]
QOfPrototipes = 1
Prototipe     = minimize ( )

[move_window]
QOfPrototipes = 1
Prototipe     = move_window ( int X, int Y )

[ksort]
QOfPrototipes = 2
Prototipe     = int ksort ( varspace A, varspace B, int NUMBER )
Prototipe2    = int ksort ( varspace A, varspace B )

[sort]
QOfPrototipes = 2
Prototipe     = int sort ( varspace VAR, int NUMBER )
Prototipe2    = int sort ( varspace VAR )

[save_fpl]
QOfPrototipes = 1
Prototipe     = save_fpl ( string FILE )

[set_channel_volume]
QOfPrototipes = 1
Prototipe     = set_channel_volume ( int WAV, int VOLUME )

[joy_name]
QOfPrototipes = 1
Prototipe     = string joy_name ( int ID )

[joy_buttons]
QOfPrototipes = 1
Prototipe     = int joy_buttons ( )

[joy_axes]
QOfPrototipes = 1
Prototipe     = int joy_axes ( )

*************************************************************************************************************************************************